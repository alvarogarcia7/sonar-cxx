#
# This workflow contains all necessary steps to build, test and release the cxx plugin
#

name: cxx plugin CI

defaults:
  run:
    # use bash only, makes it easier to write steps for Windows & Linux
    shell: bash

jobs:


  # -----------------------------------------------------------------------------------------------------------
  # Verify SonarQube rule definition files with HTML Tidy
  # - Do they contain valid HTML?
  # -----------------------------------------------------------------------------------------------------------
  verify-rules:

    strategy:
      matrix:
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:

    # checkout code
    #
    - name: Checkout repository
      uses: actions/checkout@v4

    # setup Python
    #
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.7'

    # setup Tidy
    #
    - name: Install xmllint
      run: |
        sudo apt-get update -y
        sudo apt-get install -y libxml2-utils

    - name: Install HTML Tidy
      run: |
        wget -nv --timeout=10 https://github.com/htacg/tidy-html5/releases/download/5.8.0/tidy-5.8.0-Linux-64bit.deb
        sudo dpkg -i tidy-5.8.0-Linux-64bit.deb

    # verify SonarQube rule definition files with HTML Tidy
    #
    - name: Verify rule files
      run: bash ./cxx-sensors/src/tools/check_rules.sh


  # -----------------------------------------------------------------------------------------------------------
  # Going through the Maven cycles 'validate', 'compile', 'test', 'package' in all combinations to be supported
  # The result of 'package' is uploaded as artifact for Ubuntu Linux Java 11 Temurin
  # -----------------------------------------------------------------------------------------------------------
  build-linux:

    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [ '22' ]
        distribution: [ 'temurin' ]

    runs-on: ${{ matrix.os }}

    steps:

    # context information
    #
    - name: Dump GitHub Context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump Matrix Context
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      run: echo "$MATRIX_CONTEXT"

    # checkout code
    # - to provide complete SCM information to the sonar scanner,
    #   all historical data for all branches and tags must be retrieved (fetch-depth: 0)
    #
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # setup Java
    #
    - name: Set up JDK Java ${{ matrix.java }} | ${{ matrix.distribution }} | ${{ matrix.os }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: ${{ matrix.distribution }}
        cache: maven

    # read version number from POM
    #
    - name: get-pom-version
      id: pom-version
      uses: andreacomo/maven-gav-extractor@v2

    # remove -SNAPSHOT from POM version (major.minor.patch-SNAPSHOT)
    #
    - run: echo "CXX_POM_VERSION=${{ steps.pom-version.outputs.version }}" >> $GITHUB_ENV
    - run: echo "CXX_VERSION=${CXX_POM_VERSION%-*}" >> $GITHUB_ENV

    # set version number of plugin JAR
    # - 'major.minor.patch' and 'build' number from actions run number
    #
    - name: Sets the current project's version
      run: mvn versions:set -DartifactId='cxx' -DnewVersion='${{ env.CXX_VERSION }}.${{ github.run_number }}'

    - name: Dump environment variables
      run: env

    # Build and test with with Maven
    # - use phase 'verify' to aggregate coverage results (part of integration-tests)
    # - use phase 'install' to resolve dependencies (necessary for sonar-scanner)
    #
    - name: Build and test with Maven
      run: mvn -B -e -V verify --file pom.xml

    # create artifacts from Linux, Java 11 Temurin
    #
    - name: Collect JAR files
      if: matrix.os == 'ubuntu-latest' && matrix.java == '11' && matrix.distribution == 'temurin'
      run: |
        mkdir staging
        cp sonar-cxx-plugin/target/*.jar staging
        cp cxx-sslr-toolkit/target/*.jar staging
        rm -f staging/original-*.jar
        rm -f staging/*-sources.jar

    # upload JARs as artifact
    #
    - name: Packaging workflow data as artifacts
      if: hashFiles('staging') != ''
      uses: actions/upload-artifact@v4
      with:
        name: JAR_Files
        path: staging


  # -----------------------------------------------------------------------------------------------------------
  # Going through the Maven cycles 'validate', 'compile', 'test', 'package' in all combinations to be supported
  # The result of 'package' is uploaded as artifact for Ubuntu Linux Java 11 Temurin
  # -----------------------------------------------------------------------------------------------------------
